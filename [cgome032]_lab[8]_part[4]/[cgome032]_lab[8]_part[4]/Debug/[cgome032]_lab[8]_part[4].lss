
[cgome032]_lab[8]_part[4].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000276  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000889  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007da  00000000  00000000  00000bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c5  00000000  00000000  000013c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000168c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000425  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000077  00000000  00000000  00001ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	08 d0       	rcall	.+16     	; 0xaa <main>
  9a:	eb c0       	rjmp	.+470    	; 0x272 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <ADC_init>:

#include <avr/io.h>
#include <avr/interrupt.h>

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 6e       	ori	r24, 0xE0	; 224
  a6:	80 83       	st	Z, r24
  a8:	08 95       	ret

000000aa <main>:



int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Set A to input and initialize to 0xFF
  aa:	11 b8       	out	0x01, r1	; 1
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // Set B to output and initialize to 0x00
  b0:	84 b9       	out	0x04, r24	; 4
  b2:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00; // Set D to output and initialize to 0x00
  b4:	8a b9       	out	0x0a, r24	; 10
	//DDRC = 0xFF; PORTC = 0x00; // LCD data lines
	//DDRD = 0xFF; PORTD = 0x00; // LCD control lines
	ADC_init();
  b6:	1b b8       	out	0x0b, r1	; 11
	unsigned short max = 816;
	unsigned char tmpB = 0x00;
  b8:	f2 df       	rcall	.-28     	; 0x9e <ADC_init>
	while(1){
		unsigned short x = ADC; //Value of ADC register is now stored in variable x
  ba:	10 e0       	ldi	r17, 0x00	; 0
  bc:	0f 2e       	mov	r0, r31
  be:	f8 e7       	ldi	r31, 0x78	; 120
  c0:	af 2e       	mov	r10, r31
  c2:	b1 2c       	mov	r11, r1
		if( x <= 0){
			tmpB = 0x80;
  c4:	f0 2d       	mov	r31, r0
		}
		else if( x <= max * .25){
			tmpB = 0x20;
		}
		else if( x <= max * .375){
			tmpB = 0x10;
  c6:	00 e8       	ldi	r16, 0x80	; 128
  c8:	68 94       	set
  ca:	99 24       	eor	r9, r9
		}
		else if( x <= max * .50){
			tmpB = 0x08;
  cc:	94 f8       	bld	r9, 4
  ce:	68 94       	set
  d0:	88 24       	eor	r8, r8
		}
		else if( x <= max * .625){
			tmpB = 0x04;
  d2:	83 f8       	bld	r8, 3
  d4:	68 94       	set
  d6:	77 24       	eor	r7, r7
		}
		else if( x <= max * .75){
			tmpB = 0x02;
  d8:	72 f8       	bld	r7, 2
  da:	68 94       	set
  dc:	66 24       	eor	r6, r6
		}
		else if( x <= max * .875){
			tmpB = 0x01;
  de:	61 f8       	bld	r6, 1
  e0:	55 24       	eor	r5, r5
		}
		else if( x <= max ){
			tmpB = 0x00;
  e2:	53 94       	inc	r5
	//DDRD = 0xFF; PORTD = 0x00; // LCD control lines
	ADC_init();
	unsigned short max = 816;
	unsigned char tmpB = 0x00;
	while(1){
		unsigned short x = ADC; //Value of ADC register is now stored in variable x
  e4:	41 2c       	mov	r4, r1
  e6:	f5 01       	movw	r30, r10
  e8:	c0 81       	ld	r28, Z
		if( x <= 0){
  ea:	d1 81       	ldd	r29, Z+1	; 0x01
  ec:	20 97       	sbiw	r28, 0x00	; 0
  ee:	09 f4       	brne	.+2      	; 0xf2 <main+0x48>
			tmpB = 0x80;
		}		
		else if (x <= max * .125){
  f0:	4a c0       	rjmp	.+148    	; 0x186 <main+0xdc>
  f2:	be 01       	movw	r22, r28
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	5b d0       	rcall	.+182    	; 0x1b0 <__floatunsisf>
  fa:	6b 01       	movw	r12, r22
  fc:	7c 01       	movw	r14, r24
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	4c ec       	ldi	r20, 0xCC	; 204
 104:	52 e4       	ldi	r21, 0x42	; 66
 106:	50 d0       	rcall	.+160    	; 0x1a8 <__cmpsf2>
 108:	18 16       	cp	r1, r24
 10a:	0c f0       	brlt	.+2      	; 0x10e <main+0x64>
			tmpB = 0x40;
		}
		else if( x <= max * .25){
 10c:	3e c0       	rjmp	.+124    	; 0x18a <main+0xe0>
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	4c e4       	ldi	r20, 0x4C	; 76
 114:	53 e4       	ldi	r21, 0x43	; 67
 116:	c7 01       	movw	r24, r14
 118:	b6 01       	movw	r22, r12
 11a:	46 d0       	rcall	.+140    	; 0x1a8 <__cmpsf2>
 11c:	18 16       	cp	r1, r24
 11e:	0c f0       	brlt	.+2      	; 0x122 <main+0x78>
			tmpB = 0x20;
		}
		else if( x <= max * .375){
 120:	36 c0       	rjmp	.+108    	; 0x18e <main+0xe4>
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	49 e9       	ldi	r20, 0x99	; 153
 128:	53 e4       	ldi	r21, 0x43	; 67
 12a:	c7 01       	movw	r24, r14
 12c:	b6 01       	movw	r22, r12
 12e:	3c d0       	rcall	.+120    	; 0x1a8 <__cmpsf2>
 130:	18 16       	cp	r1, r24
			tmpB = 0x10;
		}
		else if( x <= max * .50){
 132:	7c f5       	brge	.+94     	; 0x192 <main+0xe8>
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	4c ec       	ldi	r20, 0xCC	; 204
 13a:	53 e4       	ldi	r21, 0x43	; 67
 13c:	c7 01       	movw	r24, r14
 13e:	b6 01       	movw	r22, r12
 140:	33 d0       	rcall	.+102    	; 0x1a8 <__cmpsf2>
			tmpB = 0x08;
		}
		else if( x <= max * .625){
 142:	18 16       	cp	r1, r24
 144:	44 f5       	brge	.+80     	; 0x196 <main+0xec>
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	4f ef       	ldi	r20, 0xFF	; 255
 14c:	53 e4       	ldi	r21, 0x43	; 67
 14e:	c7 01       	movw	r24, r14
 150:	b6 01       	movw	r22, r12
			tmpB = 0x04;
		}
		else if( x <= max * .75){
 152:	2a d0       	rcall	.+84     	; 0x1a8 <__cmpsf2>
 154:	18 16       	cp	r1, r24
 156:	0c f5       	brge	.+66     	; 0x19a <main+0xf0>
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	49 e1       	ldi	r20, 0x19	; 25
 15e:	54 e4       	ldi	r21, 0x44	; 68
 160:	c7 01       	movw	r24, r14
 162:	b6 01       	movw	r22, r12
			tmpB = 0x02;
		}
		else if( x <= max * .875){
 164:	21 d0       	rcall	.+66     	; 0x1a8 <__cmpsf2>
 166:	18 16       	cp	r1, r24
 168:	d4 f4       	brge	.+52     	; 0x19e <main+0xf4>
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e8       	ldi	r19, 0x80	; 128
 16e:	42 e3       	ldi	r20, 0x32	; 50
 170:	54 e4       	ldi	r21, 0x44	; 68
 172:	c7 01       	movw	r24, r14
 174:	b6 01       	movw	r22, r12
 176:	18 d0       	rcall	.+48     	; 0x1a8 <__cmpsf2>
			tmpB = 0x01;
		}
		else if( x <= max ){
 178:	18 16       	cp	r1, r24
 17a:	9c f4       	brge	.+38     	; 0x1a2 <main+0xf8>
 17c:	c1 33       	cpi	r28, 0x31	; 49
			tmpB = 0x00;
 17e:	d3 40       	sbci	r29, 0x03	; 3
 180:	88 f4       	brcc	.+34     	; 0x1a4 <main+0xfa>
	unsigned short max = 816;
	unsigned char tmpB = 0x00;
	while(1){
		unsigned short x = ADC; //Value of ADC register is now stored in variable x
		if( x <= 0){
			tmpB = 0x80;
 182:	14 2d       	mov	r17, r4
 184:	0f c0       	rjmp	.+30     	; 0x1a4 <main+0xfa>
		}		
		else if (x <= max * .125){
			tmpB = 0x40;
 186:	10 2f       	mov	r17, r16
 188:	0d c0       	rjmp	.+26     	; 0x1a4 <main+0xfa>
		}
		else if( x <= max * .25){
			tmpB = 0x20;
 18a:	10 e4       	ldi	r17, 0x40	; 64
 18c:	0b c0       	rjmp	.+22     	; 0x1a4 <main+0xfa>
		}
		else if( x <= max * .375){
			tmpB = 0x10;
 18e:	10 e2       	ldi	r17, 0x20	; 32
 190:	09 c0       	rjmp	.+18     	; 0x1a4 <main+0xfa>
		}
		else if( x <= max * .50){
			tmpB = 0x08;
 192:	19 2d       	mov	r17, r9
 194:	07 c0       	rjmp	.+14     	; 0x1a4 <main+0xfa>
		}
		else if( x <= max * .625){
			tmpB = 0x04;
 196:	18 2d       	mov	r17, r8
 198:	05 c0       	rjmp	.+10     	; 0x1a4 <main+0xfa>
		}
		else if( x <= max * .75){
			tmpB = 0x02;
 19a:	17 2d       	mov	r17, r7
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <main+0xfa>
		}
		else if( x <= max * .875){
			tmpB = 0x01;
 19e:	16 2d       	mov	r17, r6
		}
		else if( x <= max ){
			tmpB = 0x00;
		}

		PORTB = tmpB;
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <main+0xfa>

	}
 1a2:	15 2d       	mov	r17, r5
 1a4:	15 b9       	out	0x05, r17	; 5
 1a6:	9f cf       	rjmp	.-194    	; 0xe6 <main+0x3c>

000001a8 <__cmpsf2>:
 1a8:	40 d0       	rcall	.+128    	; 0x22a <__fp_cmp>
 1aa:	08 f4       	brcc	.+2      	; 0x1ae <__cmpsf2+0x6>
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	08 95       	ret

000001b0 <__floatunsisf>:
 1b0:	e8 94       	clt
 1b2:	09 c0       	rjmp	.+18     	; 0x1c6 <__floatsisf+0x12>

000001b4 <__floatsisf>:
 1b4:	97 fb       	bst	r25, 7
 1b6:	3e f4       	brtc	.+14     	; 0x1c6 <__floatsisf+0x12>
 1b8:	90 95       	com	r25
 1ba:	80 95       	com	r24
 1bc:	70 95       	com	r23
 1be:	61 95       	neg	r22
 1c0:	7f 4f       	sbci	r23, 0xFF	; 255
 1c2:	8f 4f       	sbci	r24, 0xFF	; 255
 1c4:	9f 4f       	sbci	r25, 0xFF	; 255
 1c6:	99 23       	and	r25, r25
 1c8:	a9 f0       	breq	.+42     	; 0x1f4 <__floatsisf+0x40>
 1ca:	f9 2f       	mov	r31, r25
 1cc:	96 e9       	ldi	r25, 0x96	; 150
 1ce:	bb 27       	eor	r27, r27
 1d0:	93 95       	inc	r25
 1d2:	f6 95       	lsr	r31
 1d4:	87 95       	ror	r24
 1d6:	77 95       	ror	r23
 1d8:	67 95       	ror	r22
 1da:	b7 95       	ror	r27
 1dc:	f1 11       	cpse	r31, r1
 1de:	f8 cf       	rjmp	.-16     	; 0x1d0 <__floatsisf+0x1c>
 1e0:	fa f4       	brpl	.+62     	; 0x220 <__floatsisf+0x6c>
 1e2:	bb 0f       	add	r27, r27
 1e4:	11 f4       	brne	.+4      	; 0x1ea <__floatsisf+0x36>
 1e6:	60 ff       	sbrs	r22, 0
 1e8:	1b c0       	rjmp	.+54     	; 0x220 <__floatsisf+0x6c>
 1ea:	6f 5f       	subi	r22, 0xFF	; 255
 1ec:	7f 4f       	sbci	r23, 0xFF	; 255
 1ee:	8f 4f       	sbci	r24, 0xFF	; 255
 1f0:	9f 4f       	sbci	r25, 0xFF	; 255
 1f2:	16 c0       	rjmp	.+44     	; 0x220 <__floatsisf+0x6c>
 1f4:	88 23       	and	r24, r24
 1f6:	11 f0       	breq	.+4      	; 0x1fc <__floatsisf+0x48>
 1f8:	96 e9       	ldi	r25, 0x96	; 150
 1fa:	11 c0       	rjmp	.+34     	; 0x21e <__floatsisf+0x6a>
 1fc:	77 23       	and	r23, r23
 1fe:	21 f0       	breq	.+8      	; 0x208 <__floatsisf+0x54>
 200:	9e e8       	ldi	r25, 0x8E	; 142
 202:	87 2f       	mov	r24, r23
 204:	76 2f       	mov	r23, r22
 206:	05 c0       	rjmp	.+10     	; 0x212 <__floatsisf+0x5e>
 208:	66 23       	and	r22, r22
 20a:	71 f0       	breq	.+28     	; 0x228 <__floatsisf+0x74>
 20c:	96 e8       	ldi	r25, 0x86	; 134
 20e:	86 2f       	mov	r24, r22
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	2a f0       	brmi	.+10     	; 0x220 <__floatsisf+0x6c>
 216:	9a 95       	dec	r25
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	88 1f       	adc	r24, r24
 21e:	da f7       	brpl	.-10     	; 0x216 <__floatsisf+0x62>
 220:	88 0f       	add	r24, r24
 222:	96 95       	lsr	r25
 224:	87 95       	ror	r24
 226:	97 f9       	bld	r25, 7
 228:	08 95       	ret

0000022a <__fp_cmp>:
 22a:	99 0f       	add	r25, r25
 22c:	00 08       	sbc	r0, r0
 22e:	55 0f       	add	r21, r21
 230:	aa 0b       	sbc	r26, r26
 232:	e0 e8       	ldi	r30, 0x80	; 128
 234:	fe ef       	ldi	r31, 0xFE	; 254
 236:	16 16       	cp	r1, r22
 238:	17 06       	cpc	r1, r23
 23a:	e8 07       	cpc	r30, r24
 23c:	f9 07       	cpc	r31, r25
 23e:	c0 f0       	brcs	.+48     	; 0x270 <__fp_cmp+0x46>
 240:	12 16       	cp	r1, r18
 242:	13 06       	cpc	r1, r19
 244:	e4 07       	cpc	r30, r20
 246:	f5 07       	cpc	r31, r21
 248:	98 f0       	brcs	.+38     	; 0x270 <__fp_cmp+0x46>
 24a:	62 1b       	sub	r22, r18
 24c:	73 0b       	sbc	r23, r19
 24e:	84 0b       	sbc	r24, r20
 250:	95 0b       	sbc	r25, r21
 252:	39 f4       	brne	.+14     	; 0x262 <__fp_cmp+0x38>
 254:	0a 26       	eor	r0, r26
 256:	61 f0       	breq	.+24     	; 0x270 <__fp_cmp+0x46>
 258:	23 2b       	or	r18, r19
 25a:	24 2b       	or	r18, r20
 25c:	25 2b       	or	r18, r21
 25e:	21 f4       	brne	.+8      	; 0x268 <__fp_cmp+0x3e>
 260:	08 95       	ret
 262:	0a 26       	eor	r0, r26
 264:	09 f4       	brne	.+2      	; 0x268 <__fp_cmp+0x3e>
 266:	a1 40       	sbci	r26, 0x01	; 1
 268:	a6 95       	lsr	r26
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	81 1d       	adc	r24, r1
 26e:	81 1d       	adc	r24, r1
 270:	08 95       	ret

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
