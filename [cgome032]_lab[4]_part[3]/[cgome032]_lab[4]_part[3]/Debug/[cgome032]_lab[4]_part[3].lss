
[cgome032]_lab[4]_part[3].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e5  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000809  00000000  00000000  00000b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fc  00000000  00000000  0000138a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001688  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000449  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a1  00000000  00000000  00001b15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001cb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	5e d0       	rcall	.+188    	; 0x166 <main>
  aa:	6b c0       	rjmp	.+214    	; 0x182 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <light>:
unsigned char tmpC = 0x00;


unsigned char light(unsigned char C){
	unsigned char output = 0x00;
	switch (C)
  ae:	80 35       	cpi	r24, 0x50	; 80
  b0:	e1 f0       	breq	.+56     	; 0xea <light+0x3c>
  b2:	40 f4       	brcc	.+16     	; 0xc4 <light+0x16>
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	99 f0       	breq	.+38     	; 0xde <light+0x30>
  b8:	30 f1       	brcs	.+76     	; 0x106 <light+0x58>
  ba:	8a 30       	cpi	r24, 0x0A	; 10
  bc:	91 f0       	breq	.+36     	; 0xe2 <light+0x34>
  be:	88 32       	cpi	r24, 0x28	; 40
  c0:	91 f0       	breq	.+36     	; 0xe6 <light+0x38>
  c2:	1f c0       	rjmp	.+62     	; 0x102 <light+0x54>
  c4:	83 3c       	cpi	r24, 0xC3	; 195
  c6:	c9 f0       	breq	.+50     	; 0xfa <light+0x4c>
  c8:	28 f4       	brcc	.+10     	; 0xd4 <light+0x26>
  ca:	81 38       	cpi	r24, 0x81	; 129
  cc:	c1 f0       	breq	.+48     	; 0xfe <light+0x50>
  ce:	80 3a       	cpi	r24, 0xA0	; 160
  d0:	71 f0       	breq	.+28     	; 0xee <light+0x40>
  d2:	17 c0       	rjmp	.+46     	; 0x102 <light+0x54>
  d4:	87 3e       	cpi	r24, 0xE7	; 231
  d6:	79 f0       	breq	.+30     	; 0xf6 <light+0x48>
  d8:	8f 3f       	cpi	r24, 0xFF	; 255
  da:	59 f0       	breq	.+22     	; 0xf2 <light+0x44>
  dc:	12 c0       	rjmp	.+36     	; 0x102 <light+0x54>
	{
		case 0x00:
			output = 0x01;
			break;
		case 0x01:
			output = 0x0A;
  de:	8a e0       	ldi	r24, 0x0A	; 10
  e0:	08 95       	ret
			break;
		case 0x0A:
			output = 0x28;
  e2:	88 e2       	ldi	r24, 0x28	; 40
			break;
  e4:	08 95       	ret
		case 0x28:
			output = 0x50;
  e6:	80 e5       	ldi	r24, 0x50	; 80
			break;
  e8:	08 95       	ret
		case 0x50:
			output = 0xA0;
  ea:	80 ea       	ldi	r24, 0xA0	; 160
			break;
  ec:	08 95       	ret
		case 0xA0:
			output = 0xFF;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
			break;
  f0:	08 95       	ret
		case 0xFF:
			output = 0xE7;
  f2:	87 ee       	ldi	r24, 0xE7	; 231
			break;
  f4:	08 95       	ret
		case 0xE7:
			output = 0xC3;
  f6:	83 ec       	ldi	r24, 0xC3	; 195
			break;
  f8:	08 95       	ret
		case 0xC3:
			output = 0x81;
  fa:	81 e8       	ldi	r24, 0x81	; 129
			break;
  fc:	08 95       	ret
		case 0x81:
			output = 0x00;
  fe:	80 e0       	ldi	r24, 0x00	; 0
			break;
 100:	08 95       	ret
		default:
			output = 0x00;
 102:	80 e0       	ldi	r24, 0x00	; 0
			break;
 104:	08 95       	ret
unsigned char light(unsigned char C){
	unsigned char output = 0x00;
	switch (C)
	{
		case 0x00:
			output = 0x01;
 106:	81 e0       	ldi	r24, 0x01	; 1
			output = 0x00;
			break;
			
	}
	return output;
}
 108:	08 95       	ret

0000010a <light_tick>:


void light_tick(){
	
	tmpA = ~PINA & 0x01;
 10a:	80 b1       	in	r24, 0x00	; 0
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	28 2f       	mov	r18, r24
 110:	21 70       	andi	r18, 0x01	; 1
 112:	80 fd       	sbrc	r24, 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <tmpA>
	switch(state){ // Transitions
 11a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	51 f0       	breq	.+20     	; 0x136 <light_tick+0x2c>
 122:	28 f0       	brcs	.+10     	; 0x12e <light_tick+0x24>
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	69 f0       	breq	.+26     	; 0x142 <light_tick+0x38>
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	79 f0       	breq	.+30     	; 0x14a <light_tick+0x40>
 12c:	14 c0       	rjmp	.+40     	; 0x156 <light_tick+0x4c>
		case Init:
			state = wait;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
 134:	08 95       	ret
		case wait:
			if(tmpA){
 136:	21 11       	cpse	r18, r1
 138:	15 c0       	rjmp	.+42     	; 0x164 <light_tick+0x5a>
				state = nextState;
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 140:	0c c0       	rjmp	.+24     	; 0x15a <light_tick+0x50>
			else{
				state = wait;
			}
			break;
		case nextState:
			state = buttonPush;
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
 148:	08 95       	ret
		case buttonPush:
			if(tmpA){
 14a:	22 23       	and	r18, r18
 14c:	59 f0       	breq	.+22     	; 0x164 <light_tick+0x5a>
				state = buttonPush;
			}
			else{
				state = wait;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 154:	08 95       	ret
			}
			break;
	}
	switch(state){ // State actions
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	29 f4       	brne	.+10     	; 0x164 <light_tick+0x5a>
		case Init:
			break;
		case wait:
			break;
		case nextState:
			tmpC = light(tmpC);
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 15e:	a7 df       	rcall	.-178    	; 0xae <light>
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 164:	08 95       	ret

00000166 <main>:
}


int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Configure Port A to inputs
 166:	11 b8       	out	0x01, r1	; 1
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00; // Configure Port C to outputs
 16c:	87 b9       	out	0x07, r24	; 7
 16e:	18 b8       	out	0x08, r1	; 8

	state = Init;
 170:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
	tmpC = 0x00;
 174:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
    /* Replace with your application code */
    while (1) 
    {
		light_tick();
		PORTC = tmpC;
 178:	c8 df       	rcall	.-112    	; 0x10a <light_tick>
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 17e:	88 b9       	out	0x08, r24	; 8
 180:	fb cf       	rjmp	.-10     	; 0x178 <main+0x12>

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
