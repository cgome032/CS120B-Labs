
[cgome032]_lab[6]_part[2].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000003d6  0000046a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010e  0080010e  00000478  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6c  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a4  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000553  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051f  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027d  00000000  00000000  0000261b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c5 c0       	rjmp	.+394    	; 0x1c0 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	54 d1       	rcall	.+680    	; 0x36c <main>
  c4:	86 c1       	rjmp	.+780    	; 0x3d2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
  void TimerOff() {
	  TCCR1B = 0x00; // bit3bit1bit0=000: timer off
  }

  void TimerISR() {
	  TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerOn>:
 178:	8b e0       	ldi	r24, 0x0B	; 11
 17a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 17e:	8d e7       	ldi	r24, 0x7D	; 125
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 186:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 190:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 194:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1a0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1a4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1a8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 1ac:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 1b0:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 1b4:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 1b8:	8f b7       	in	r24, 0x3f	; 63
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	8f bf       	out	0x3f, r24	; 63
 1be:	08 95       	ret

000001c0 <__vector_13>:
  }

  // In our approach, the C programmer does not touch this ISR, but rather TimerISR()
  ISR(TIMER1_COMPA_vect) {
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
	  // CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	  _avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 1d2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <_avr_timer_cntcurr>
 1d6:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x1>
 1da:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x2>
 1de:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x3>
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	a1 09       	sbc	r26, r1
 1e6:	b1 09       	sbc	r27, r1
 1e8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 1ec:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 1f0:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 1f4:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
	  if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 1f8:	89 2b       	or	r24, r25
 1fa:	8a 2b       	or	r24, r26
 1fc:	8b 2b       	or	r24, r27
 1fe:	99 f4       	brne	.+38     	; 0x226 <__vector_13+0x66>
  void TimerOff() {
	  TCCR1B = 0x00; // bit3bit1bit0=000: timer off
  }

  void TimerISR() {
	  TimerFlag = 1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <TimerFlag>
  ISR(TIMER1_COMPA_vect) {
	  // CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	  _avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	  if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		  TimerISR(); // Call the ISR that the user uses
		  _avr_timer_cntcurr = _avr_timer_M;
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 212:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 216:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 21a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 21e:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 222:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
	  }
  }
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <TimerSet>:

  // Set TimerISR() to tick every M ms
  void TimerSet(unsigned long M) {
	  _avr_timer_M = M;
 238:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 23c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 240:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 244:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	  _avr_timer_cntcurr = _avr_timer_M;
 248:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <_avr_timer_cntcurr>
 24c:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <_avr_timer_cntcurr+0x1>
 250:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_avr_timer_cntcurr+0x2>
 254:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_avr_timer_cntcurr+0x3>
 258:	08 95       	ret

0000025a <lightTick>:
  }
  void lightTick(){
	switch (state) // Transitions
 25a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <state>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	49 f1       	breq	.+82     	; 0x2b4 <lightTick+0x5a>
 262:	28 f4       	brcc	.+10     	; 0x26e <lightTick+0x14>
 264:	88 23       	and	r24, r24
 266:	51 f0       	breq	.+20     	; 0x27c <lightTick+0x22>
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	e1 f0       	breq	.+56     	; 0x2a4 <lightTick+0x4a>
 26c:	59 c0       	rjmp	.+178    	; 0x320 <lightTick+0xc6>
 26e:	84 30       	cpi	r24, 0x04	; 4
 270:	e9 f1       	breq	.+122    	; 0x2ec <lightTick+0x92>
 272:	a0 f1       	brcs	.+104    	; 0x2dc <lightTick+0x82>
 274:	85 30       	cpi	r24, 0x05	; 5
 276:	09 f4       	brne	.+2      	; 0x27a <lightTick+0x20>
 278:	4b c0       	rjmp	.+150    	; 0x310 <lightTick+0xb6>
 27a:	52 c0       	rjmp	.+164    	; 0x320 <lightTick+0xc6>
	{
		case light1:
			if(tmpA){
 27c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <tmpA>
 280:	88 23       	and	r24, r24
 282:	61 f0       	breq	.+24     	; 0x29c <lightTick+0x42>
				state = wait1;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
				if(score > 0)
 28a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 28e:	88 23       	and	r24, r24
 290:	09 f4       	brne	.+2      	; 0x294 <lightTick+0x3a>
 292:	58 c0       	rjmp	.+176    	; 0x344 <lightTick+0xea>
					score = score -1;
 294:	81 50       	subi	r24, 0x01	; 1
 296:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 29a:	54 c0       	rjmp	.+168    	; 0x344 <lightTick+0xea>
			}
			else{
				state = light2;
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
 2a2:	54 c0       	rjmp	.+168    	; 0x34c <lightTick+0xf2>
			}
			break;
		case wait1:
			if(tmpA){
 2a4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <tmpA>
 2a8:	88 23       	and	r24, r24
 2aa:	09 f4       	brne	.+2      	; 0x2ae <lightTick+0x54>
 2ac:	4b c0       	rjmp	.+150    	; 0x344 <lightTick+0xea>
				state = light1;
 2ae:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <state>
 2b2:	44 c0       	rjmp	.+136    	; 0x33c <lightTick+0xe2>
			else{
				state = wait1;
			}
			break;
		case light2:
			if(tmpA){
 2b4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <tmpA>
 2b8:	88 23       	and	r24, r24
 2ba:	61 f0       	breq	.+24     	; 0x2d4 <lightTick+0x7a>
				state = wait2;
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
				if(score < 9)
 2c2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 2c6:	89 30       	cpi	r24, 0x09	; 9
 2c8:	08 f0       	brcs	.+2      	; 0x2cc <lightTick+0x72>
 2ca:	44 c0       	rjmp	.+136    	; 0x354 <lightTick+0xfa>
					score = score + 1;
 2cc:	8f 5f       	subi	r24, 0xFF	; 255
 2ce:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 2d2:	40 c0       	rjmp	.+128    	; 0x354 <lightTick+0xfa>
			}
			else{
				state = light3;
 2d4:	84 e0       	ldi	r24, 0x04	; 4
 2d6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
 2da:	40 c0       	rjmp	.+128    	; 0x35c <lightTick+0x102>
			}
			break;
		case wait2:
			if(tmpA){
 2dc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <tmpA>
 2e0:	88 23       	and	r24, r24
 2e2:	c1 f1       	breq	.+112    	; 0x354 <lightTick+0xfa>
				state = light2;
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
 2ea:	30 c0       	rjmp	.+96     	; 0x34c <lightTick+0xf2>
			else{
				state = wait2;
			}
			break;
		case light3:
			if(tmpA){
 2ec:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <tmpA>
 2f0:	88 23       	and	r24, r24
 2f2:	59 f0       	breq	.+22     	; 0x30a <lightTick+0xb0>
				state = wait3;
 2f4:	85 e0       	ldi	r24, 0x05	; 5
 2f6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
				if(score > 0)
 2fa:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 2fe:	88 23       	and	r24, r24
 300:	89 f1       	breq	.+98     	; 0x364 <lightTick+0x10a>
					score = score - 1;
 302:	81 50       	subi	r24, 0x01	; 1
 304:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 308:	2d c0       	rjmp	.+90     	; 0x364 <lightTick+0x10a>
			}
			else{
				state = light1;
 30a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <state>
 30e:	16 c0       	rjmp	.+44     	; 0x33c <lightTick+0xe2>
			}
			break;
		case wait3:
			if(tmpA){
 310:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <tmpA>
 314:	88 23       	and	r24, r24
 316:	31 f1       	breq	.+76     	; 0x364 <lightTick+0x10a>
				state = light3;
 318:	84 e0       	ldi	r24, 0x04	; 4
 31a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
 31e:	1e c0       	rjmp	.+60     	; 0x35c <lightTick+0x102>
			else{
				state = wait3;
			}
			break;
	}
	switch (state){ // State actions
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	a1 f0       	breq	.+40     	; 0x34c <lightTick+0xf2>
 324:	28 f4       	brcc	.+10     	; 0x330 <lightTick+0xd6>
 326:	88 23       	and	r24, r24
 328:	49 f0       	breq	.+18     	; 0x33c <lightTick+0xe2>
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	f1 f4       	brne	.+60     	; 0x36a <lightTick+0x110>
 32e:	0a c0       	rjmp	.+20     	; 0x344 <lightTick+0xea>
 330:	84 30       	cpi	r24, 0x04	; 4
 332:	a1 f0       	breq	.+40     	; 0x35c <lightTick+0x102>
 334:	78 f0       	brcs	.+30     	; 0x354 <lightTick+0xfa>
 336:	85 30       	cpi	r24, 0x05	; 5
 338:	c1 f4       	brne	.+48     	; 0x36a <lightTick+0x110>
 33a:	14 c0       	rjmp	.+40     	; 0x364 <lightTick+0x10a>
		case light1:
			tmpC = 0x01;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpC>
			break;
 342:	08 95       	ret
		case wait1:
			tmpC = 0x01;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpC>
			break;
 34a:	08 95       	ret
		case light2:
			tmpC = 0x02;
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpC>
			break;
 352:	08 95       	ret
		case wait2:
			tmpC = 0x02;
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpC>
			break;
 35a:	08 95       	ret
		case light3:
			tmpC = 0x04;
 35c:	84 e0       	ldi	r24, 0x04	; 4
 35e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpC>
			break;
 362:	08 95       	ret
		case wait3:
			tmpC = 0x04;
 364:	84 e0       	ldi	r24, 0x04	; 4
 366:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpC>
 36a:	08 95       	ret

0000036c <main>:
  }
  

  int main()
  {
	  DDRB = 0xFF; PORTB = 0x00; // Initiate DDRC to outputs
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	84 b9       	out	0x04, r24	; 4
 370:	15 b8       	out	0x05, r1	; 5
	  DDRA = 0x00; PORTA = 0xFF; // Initiate DDRA to inputs
 372:	11 b8       	out	0x01, r1	; 1
 374:	82 b9       	out	0x02, r24	; 2
	  DDRC = 0xFF; PORTC = 0x00; // LCD data lines
 376:	87 b9       	out	0x07, r24	; 7
 378:	18 b8       	out	0x08, r1	; 8
	  DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 37a:	8a b9       	out	0x0a, r24	; 10
 37c:	1b b8       	out	0x0b, r1	; 11

	  TimerSet(300);
 37e:	6c e2       	ldi	r22, 0x2C	; 44
 380:	71 e0       	ldi	r23, 0x01	; 1
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
	  TimerOn();
 386:	58 df       	rcall	.-336    	; 0x238 <TimerSet>
	  state = light1;

	  // Initialize LCD display
	  LCD_init();
 388:	f7 de       	rcall	.-530    	; 0x178 <TimerOn>
 38a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <state>
	  LCD_ClearScreen();
	  score = 0x05;
 38e:	c3 de       	rcall	.-634    	; 0x116 <LCD_init>
 390:	b7 de       	rcall	.-658    	; 0x100 <LCD_ClearScreen>

	  while(1) {
		LCD_Cursor(1);
 392:	85 e0       	ldi	r24, 0x05	; 5
 394:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
		if(score == 9)
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	b5 de       	rcall	.-662    	; 0x106 <LCD_Cursor>
 39c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
			LCD_DisplayString(1,"You Win!!");
 3a0:	89 30       	cpi	r24, 0x09	; 9
 3a2:	29 f4       	brne	.+10     	; 0x3ae <main+0x42>
 3a4:	64 e0       	ldi	r22, 0x04	; 4
 3a6:	71 e0       	ldi	r23, 0x01	; 1
		else
			LCD_WriteData(score + '0');
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	cd de       	rcall	.-614    	; 0x146 <LCD_DisplayString>
		tmpA = ~PINA & 0x01;
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <main+0x46>
 3ae:	80 5d       	subi	r24, 0xD0	; 208
 3b0:	c1 de       	rcall	.-638    	; 0x134 <LCD_WriteData>
 3b2:	80 b1       	in	r24, 0x00	; 0
 3b4:	80 95       	com	r24
		// User code (i.e. synchSM calls)
		lightTick();
 3b6:	81 70       	andi	r24, 0x01	; 1
 3b8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <tmpA>
		while (!TimerFlag){}	// Wait 1 sec
 3bc:	4e df       	rcall	.-356    	; 0x25a <lightTick>
 3be:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <TimerFlag>
		TimerFlag = 0;
 3c2:	88 23       	and	r24, r24
 3c4:	e1 f3       	breq	.-8      	; 0x3be <main+0x52>
		// Note: For the above a better style would use a synchSM with TickSM()
		// This example just illustrates the use of the ISR and flag
		PORTB = tmpC;
 3c6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <TimerFlag>
 3ca:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpC>
 3ce:	85 b9       	out	0x05, r24	; 5
 3d0:	e3 cf       	rjmp	.-58     	; 0x398 <main+0x2c>

000003d2 <_exit>:
 3d2:	f8 94       	cli

000003d4 <__stop_program>:
 3d4:	ff cf       	rjmp	.-2      	; 0x3d4 <__stop_program>
