
[cgome032]_lab[3]_part[4].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008de  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  00000bee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c4  00000000  00000000  000013bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001c18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	9f d0       	rcall	.+318    	; 0x1e8 <main>
  aa:	aa c0       	rjmp	.+340    	; 0x200 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <lock_Tick>:

unsigned char tmpB;


void lock_Tick(){
	buttonX = PINA & 0x01;
  ae:	80 b1       	in	r24, 0x00	; 0
  b0:	81 70       	andi	r24, 0x01	; 1
  b2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <buttonX>
	buttonY = PINA & 0x02;
  b6:	20 b1       	in	r18, 0x00	; 0
  b8:	22 70       	andi	r18, 0x02	; 2
  ba:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <buttonY>
	buttonP = PINA & 0x04;
  be:	30 b1       	in	r19, 0x00	; 0
  c0:	34 70       	andi	r19, 0x04	; 4
  c2:	30 93 00 01 	sts	0x0100, r19	; 0x800100 <_edata>
	buttonLock = PINA & 0x80;
  c6:	40 b1       	in	r20, 0x00	; 0
  c8:	40 78       	andi	r20, 0x80	; 128
  ca:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <buttonLock>
		
	switch(state){ // Transitions
  ce:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <state>
  d2:	92 30       	cpi	r25, 0x02	; 2
  d4:	71 f1       	breq	.+92     	; 0x132 <lock_Tick+0x84>
  d6:	28 f4       	brcc	.+10     	; 0xe2 <lock_Tick+0x34>
  d8:	99 23       	and	r25, r25
  da:	59 f0       	breq	.+22     	; 0xf2 <lock_Tick+0x44>
  dc:	91 30       	cpi	r25, 0x01	; 1
  de:	b1 f0       	breq	.+44     	; 0x10c <lock_Tick+0x5e>
  e0:	77 c0       	rjmp	.+238    	; 0x1d0 <lock_Tick+0x122>
  e2:	94 30       	cpi	r25, 0x04	; 4
  e4:	09 f4       	brne	.+2      	; 0xe8 <lock_Tick+0x3a>
  e6:	4b c0       	rjmp	.+150    	; 0x17e <lock_Tick+0xd0>
  e8:	c8 f1       	brcs	.+114    	; 0x15c <lock_Tick+0xae>
  ea:	95 30       	cpi	r25, 0x05	; 5
  ec:	09 f4       	brne	.+2      	; 0xf0 <lock_Tick+0x42>
  ee:	5c c0       	rjmp	.+184    	; 0x1a8 <lock_Tick+0xfa>
  f0:	6f c0       	rjmp	.+222    	; 0x1d0 <lock_Tick+0x122>
		case locked:
			if(buttonLock){
				state = locked;
			}
			if(!buttonX && !buttonY && buttonP && !buttonLock){
  f2:	81 11       	cpse	r24, r1
  f4:	72 c0       	rjmp	.+228    	; 0x1da <lock_Tick+0x12c>
  f6:	21 11       	cpse	r18, r1
  f8:	70 c0       	rjmp	.+224    	; 0x1da <lock_Tick+0x12c>
  fa:	33 23       	and	r19, r19
  fc:	09 f4       	brne	.+2      	; 0x100 <lock_Tick+0x52>
  fe:	6d c0       	rjmp	.+218    	; 0x1da <lock_Tick+0x12c>
 100:	41 11       	cpse	r20, r1
 102:	6b c0       	rjmp	.+214    	; 0x1da <lock_Tick+0x12c>
				state = wait;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 10a:	08 95       	ret
			else{
				state = locked;
			}
			break;
		case wait:
			if(!buttonX && !buttonY && buttonP && !buttonLock){
 10c:	81 11       	cpse	r24, r1
 10e:	0e c0       	rjmp	.+28     	; 0x12c <lock_Tick+0x7e>
 110:	21 11       	cpse	r18, r1
 112:	0c c0       	rjmp	.+24     	; 0x12c <lock_Tick+0x7e>
 114:	33 23       	and	r19, r19
 116:	21 f0       	breq	.+8      	; 0x120 <lock_Tick+0x72>
 118:	44 23       	and	r20, r20
 11a:	09 f4       	brne	.+2      	; 0x11e <lock_Tick+0x70>
 11c:	64 c0       	rjmp	.+200    	; 0x1e6 <lock_Tick+0x138>
 11e:	06 c0       	rjmp	.+12     	; 0x12c <lock_Tick+0x7e>
				state = wait;
			}
			else if(!buttonX && !buttonY && !buttonP && !buttonLock){
 120:	41 11       	cpse	r20, r1
 122:	04 c0       	rjmp	.+8      	; 0x12c <lock_Tick+0x7e>
				state = release;
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 12a:	08 95       	ret
			}
			else{
				state = locked;
 12c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
 130:	54 c0       	rjmp	.+168    	; 0x1da <lock_Tick+0x12c>
			}
			break;
		case release:
			if(!buttonX && !buttonY && !buttonP && !buttonLock){
 132:	81 11       	cpse	r24, r1
 134:	10 c0       	rjmp	.+32     	; 0x156 <lock_Tick+0xa8>
 136:	21 11       	cpse	r18, r1
 138:	06 c0       	rjmp	.+12     	; 0x146 <lock_Tick+0x98>
 13a:	31 11       	cpse	r19, r1
 13c:	0c c0       	rjmp	.+24     	; 0x156 <lock_Tick+0xa8>
 13e:	44 23       	and	r20, r20
 140:	09 f4       	brne	.+2      	; 0x144 <lock_Tick+0x96>
 142:	51 c0       	rjmp	.+162    	; 0x1e6 <lock_Tick+0x138>
 144:	08 c0       	rjmp	.+16     	; 0x156 <lock_Tick+0xa8>
				state = release;
			}
			else if(!buttonX && buttonY && !buttonP && !buttonLock){
 146:	31 11       	cpse	r19, r1
 148:	06 c0       	rjmp	.+12     	; 0x156 <lock_Tick+0xa8>
 14a:	41 11       	cpse	r20, r1
 14c:	04 c0       	rjmp	.+8      	; 0x156 <lock_Tick+0xa8>
				state = unlock;
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 154:	45 c0       	rjmp	.+138    	; 0x1e0 <lock_Tick+0x132>
			}
			else{
				state = locked;
 156:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
 15a:	3f c0       	rjmp	.+126    	; 0x1da <lock_Tick+0x12c>
			}
			break;
		case unlock:
			if(!buttonX && !buttonY && !buttonP && buttonLock){
 15c:	81 11       	cpse	r24, r1
 15e:	40 c0       	rjmp	.+128    	; 0x1e0 <lock_Tick+0x132>
 160:	21 11       	cpse	r18, r1
 162:	3e c0       	rjmp	.+124    	; 0x1e0 <lock_Tick+0x132>
 164:	31 11       	cpse	r19, r1
 166:	05 c0       	rjmp	.+10     	; 0x172 <lock_Tick+0xc4>
 168:	44 23       	and	r20, r20
 16a:	d1 f1       	breq	.+116    	; 0x1e0 <lock_Tick+0x132>
				state = locked;
 16c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
 170:	34 c0       	rjmp	.+104    	; 0x1da <lock_Tick+0x12c>
			}
			else if(!buttonX && !buttonY && buttonP && !buttonLock){
 172:	41 11       	cpse	r20, r1
 174:	35 c0       	rjmp	.+106    	; 0x1e0 <lock_Tick+0x132>
				state = wait2;
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 17c:	08 95       	ret
			else{
				state = unlock;
			}
			break;
		case wait2:
			if(!buttonX && !buttonY && !buttonP && !buttonLock){
 17e:	81 11       	cpse	r24, r1
 180:	0f c0       	rjmp	.+30     	; 0x1a0 <lock_Tick+0xf2>
 182:	21 11       	cpse	r18, r1
 184:	0d c0       	rjmp	.+26     	; 0x1a0 <lock_Tick+0xf2>
 186:	31 11       	cpse	r19, r1
 188:	09 c0       	rjmp	.+18     	; 0x19c <lock_Tick+0xee>
 18a:	41 11       	cpse	r20, r1
 18c:	04 c0       	rjmp	.+8      	; 0x196 <lock_Tick+0xe8>
				state = release2;
 18e:	85 e0       	ldi	r24, 0x05	; 5
 190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 194:	08 95       	ret
			}
			else if(!buttonX && !buttonY && !buttonP && buttonLock){
				state = locked;
 196:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
 19a:	1f c0       	rjmp	.+62     	; 0x1da <lock_Tick+0x12c>
			}
			else if(!buttonX && !buttonY && buttonP && !buttonLock){
 19c:	44 23       	and	r20, r20
 19e:	19 f1       	breq	.+70     	; 0x1e6 <lock_Tick+0x138>
				state = wait2;
			}
			else{
				state = unlock;
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 1a6:	1c c0       	rjmp	.+56     	; 0x1e0 <lock_Tick+0x132>
			}
			break;
		case release2:
			if(!buttonX && !buttonY && !buttonP && buttonLock || !buttonX && buttonY && !buttonP && !buttonLock){
 1a8:	81 11       	cpse	r24, r1
 1aa:	0e c0       	rjmp	.+28     	; 0x1c8 <lock_Tick+0x11a>
 1ac:	21 11       	cpse	r18, r1
 1ae:	05 c0       	rjmp	.+10     	; 0x1ba <lock_Tick+0x10c>
 1b0:	31 11       	cpse	r19, r1
 1b2:	0a c0       	rjmp	.+20     	; 0x1c8 <lock_Tick+0x11a>
 1b4:	41 11       	cpse	r20, r1
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <lock_Tick+0x114>
 1b8:	08 95       	ret
 1ba:	31 11       	cpse	r19, r1
 1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <lock_Tick+0x11a>
 1be:	41 11       	cpse	r20, r1
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <lock_Tick+0x11a>
				state = locked;
 1c2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
 1c6:	09 c0       	rjmp	.+18     	; 0x1da <lock_Tick+0x12c>
			}
			else if(!buttonX && !buttonY && !buttonP && !buttonLock){
				state = release2;
			}
			else{
				state = unlock;
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 1ce:	08 c0       	rjmp	.+16     	; 0x1e0 <lock_Tick+0x132>
			}
			break;
	}
	switch(state){ // State actions
 1d0:	99 23       	and	r25, r25
 1d2:	19 f0       	breq	.+6      	; 0x1da <lock_Tick+0x12c>
 1d4:	93 30       	cpi	r25, 0x03	; 3
 1d6:	39 f4       	brne	.+14     	; 0x1e6 <lock_Tick+0x138>
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <lock_Tick+0x132>
		case locked:
			tmpB = 0x00;
 1da:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <tmpB>
			break;
 1de:	08 95       	ret
		case wait:
			break;
		case release:
			break;
		case unlock:
			tmpB = 0x01;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tmpB>
 1e6:	08 95       	ret

000001e8 <main>:
	}			
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
 1e8:	11 b8       	out	0x01, r1	; 1
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // Configure port B's 8 pins as outputs
 1ee:	84 b9       	out	0x04, r24	; 4
 1f0:	15 b8       	out	0x05, r1	; 5
										// initialize to 0s
																				
	state = locked;
 1f2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>

	while (1) 
    {		
		lock_Tick();
		PORTB = tmpB;
 1f6:	5b df       	rcall	.-330    	; 0xae <lock_Tick>
 1f8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tmpB>
 1fc:	85 b9       	out	0x05, r24	; 5
 1fe:	fb cf       	rjmp	.-10     	; 0x1f6 <main+0xe>

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
