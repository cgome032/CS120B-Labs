
[cgome032]_lab[3]_part[1].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089c  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000289  00000000  00000000  000012c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000431  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000019b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	42 d0       	rcall	.+132    	; 0x12e <main>
  aa:	51 c0       	rjmp	.+162    	; 0x14e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <led_Tick>:
unsigned char button;
unsigned char tmpB;


void led_Tick(){
	switch(state){
  ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	69 f0       	breq	.+26     	; 0xd0 <led_Tick+0x22>
  b6:	28 f0       	brcs	.+10     	; 0xc2 <led_Tick+0x14>
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	91 f0       	breq	.+36     	; 0xe0 <led_Tick+0x32>
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	c1 f0       	breq	.+48     	; 0xf0 <led_Tick+0x42>
  c0:	1e c0       	rjmp	.+60     	; 0xfe <led_Tick+0x50>
		case init:
			if(button == 1){
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	11 f5       	brne	.+68     	; 0x10e <led_Tick+0x60>
				state = led2;
  ca:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
  ce:	23 c0       	rjmp	.+70     	; 0x116 <led_Tick+0x68>
			}
			else
				state = init;
			break;
		case led2:
			if(button == 1){
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	f9 f0       	breq	.+62     	; 0x116 <led_Tick+0x68>
				state = led2;
			}
			else
				state = wait;
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
  de:	1f c0       	rjmp	.+62     	; 0x11e <led_Tick+0x70>
			break;
		case wait:
			if(button == 1){
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	d9 f4       	brne	.+54     	; 0x11e <led_Tick+0x70>
				state = led1;
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
  ee:	1b c0       	rjmp	.+54     	; 0x126 <led_Tick+0x78>
			}
			else
				state = wait;
			break;
		case led1:
			if(button == 1){
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	b9 f0       	breq	.+46     	; 0x126 <led_Tick+0x78>
				state = led1;
			}
			else
				state = init;
  f8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
  fc:	08 c0       	rjmp	.+16     	; 0x10e <led_Tick+0x60>
			break;	
	}
	switch(state){
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	51 f0       	breq	.+20     	; 0x116 <led_Tick+0x68>
 102:	28 f0       	brcs	.+10     	; 0x10e <led_Tick+0x60>
 104:	82 30       	cpi	r24, 0x02	; 2
 106:	59 f0       	breq	.+22     	; 0x11e <led_Tick+0x70>
 108:	83 30       	cpi	r24, 0x03	; 3
 10a:	81 f4       	brne	.+32     	; 0x12c <led_Tick+0x7e>
 10c:	0c c0       	rjmp	.+24     	; 0x126 <led_Tick+0x78>
		case init:
			tmpB = 0x01;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tmpB>
			break;
 114:	08 95       	ret
		case led2:
			tmpB = 0x02;
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tmpB>
			break;
 11c:	08 95       	ret
		case wait:
			tmpB = 0x02;
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tmpB>
			break;
 124:	08 95       	ret
		case led1:
			tmpB = 0x01;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tmpB>
 12c:	08 95       	ret

0000012e <main>:
	}			
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
 12e:	11 b8       	out	0x01, r1	; 1
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // Configure port B's 8 pins as outputs
 134:	84 b9       	out	0x04, r24	; 4
 136:	15 b8       	out	0x05, r1	; 5
										// initialize to 0s
																				
	state = init;
 138:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>

	while (1) 
    {
		button = PINA & 0x01;
 13c:	80 b1       	in	r24, 0x00	; 0
 13e:	81 70       	andi	r24, 0x01	; 1
 140:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		led_Tick();
		PORTB = tmpB;
 144:	b4 df       	rcall	.-152    	; 0xae <led_Tick>
 146:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tmpB>
 14a:	85 b9       	out	0x05, r24	; 5
 14c:	f7 cf       	rjmp	.-18     	; 0x13c <main+0xe>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
