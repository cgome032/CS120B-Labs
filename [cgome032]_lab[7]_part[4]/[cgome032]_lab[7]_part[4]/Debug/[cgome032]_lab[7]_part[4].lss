
[cgome032]_lab[7]_part[4].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000444  000004d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000444  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800108  00800108  000004e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb4  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c2  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f0  00000000  00000000  00001a36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d2  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019c  00000000  00000000  000025de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000277a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e4       	ldi	r30, 0x44	; 68
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	60 d1       	rcall	.+704    	; 0x384 <main>
  c4:	bd c1       	rjmp	.+890    	; 0x440 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
void TimerOff() {
 TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
 TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
  ec:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
  f0:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
  f4:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
  f8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
  fc:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 100:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 104:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 // CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
 _avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 122:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_avr_timer_cntcurr>
 126:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x1>
 12a:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <_avr_timer_cntcurr+0x2>
 12e:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 13c:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 140:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 144:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
 if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
void TimerOff() {
 TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
 TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <TimerFlag>
ISR(TIMER1_COMPA_vect) {
 // CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
 _avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
  TimerISR(); // Call the ISR that the user uses
  _avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 15a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 15e:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 162:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 166:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 16a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 16e:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 172:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
 }
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
 _avr_timer_M = M;
 188:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
 18c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
 190:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
 194:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
 _avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <_avr_timer_cntcurr>
 19c:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <_avr_timer_cntcurr+0x1>
 1a0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr+0x2>
 1a4:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x3>
 1a8:	08 95       	ret

000001aa <SM_Three_Tick>:
}

enum threeStates{threeInit,first, second, third}threeState;
void SM_Three_Tick(){
	switch(threeState){ // Transitions
 1aa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <threeState>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	51 f0       	breq	.+20     	; 0x1c6 <SM_Three_Tick+0x1c>
 1b2:	28 f0       	brcs	.+10     	; 0x1be <SM_Three_Tick+0x14>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	59 f0       	breq	.+22     	; 0x1ce <SM_Three_Tick+0x24>
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	69 f0       	breq	.+26     	; 0x1d6 <SM_Three_Tick+0x2c>
 1bc:	10 c0       	rjmp	.+32     	; 0x1de <SM_Three_Tick+0x34>
		case threeInit:
			threeState = first;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <threeState>
			break;
 1c4:	12 c0       	rjmp	.+36     	; 0x1ea <SM_Three_Tick+0x40>
		case first:
			threeState = second;
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <threeState>
 1cc:	12 c0       	rjmp	.+36     	; 0x1f2 <SM_Three_Tick+0x48>
			break;
		case second:
			threeState = third;
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <threeState>
 1d4:	12 c0       	rjmp	.+36     	; 0x1fa <SM_Three_Tick+0x50>
			break;
		case third:
			threeState = first;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <threeState>
			break;
 1dc:	06 c0       	rjmp	.+12     	; 0x1ea <SM_Three_Tick+0x40>
	}
	switch(threeState){ // State actions
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	41 f0       	breq	.+16     	; 0x1f2 <SM_Three_Tick+0x48>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	51 f0       	breq	.+20     	; 0x1fa <SM_Three_Tick+0x50>
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	59 f4       	brne	.+22     	; 0x200 <SM_Three_Tick+0x56>
		case threeInit:
			break;
		case first:
			threeLEDs = 0x01;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <threeLEDs>
			break;
 1f0:	08 95       	ret
		case second:
			threeLEDs = 0x02;
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <threeLEDs>
			break;
 1f8:	08 95       	ret
		case third:
			threeLEDs = 0x04;
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <threeLEDs>
 200:	08 95       	ret

00000202 <SM_Single_Tick>:
	}
}

enum singleStates{on, off}singleState;
void SM_Single_Tick(){
	switch(singleState){ // Transitions
 202:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <singleState>
 206:	88 23       	and	r24, r24
 208:	19 f0       	breq	.+6      	; 0x210 <SM_Single_Tick+0xe>
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	29 f0       	breq	.+10     	; 0x218 <SM_Single_Tick+0x16>
 20e:	07 c0       	rjmp	.+14     	; 0x21e <SM_Single_Tick+0x1c>
		case on:
			singleState = off;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <singleState>
 216:	0c c0       	rjmp	.+24     	; 0x230 <SM_Single_Tick+0x2e>
			break;
		case off:
			singleState = on;
 218:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <singleState>
 21c:	05 c0       	rjmp	.+10     	; 0x228 <SM_Single_Tick+0x26>
			break;
	}
	switch(singleState){ // State Actions
 21e:	88 23       	and	r24, r24
 220:	19 f0       	breq	.+6      	; 0x228 <SM_Single_Tick+0x26>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	39 f4       	brne	.+14     	; 0x234 <SM_Single_Tick+0x32>
 226:	04 c0       	rjmp	.+8      	; 0x230 <SM_Single_Tick+0x2e>
		case on:
			blinkingLED = 0x08;
 228:	88 e0       	ldi	r24, 0x08	; 8
 22a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <blinkingLED>
			break;
 22e:	08 95       	ret
		case off:
			blinkingLED = 0x00;
 230:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <blinkingLED>
 234:	08 95       	ret

00000236 <SM_output>:
void SM_output(){
	switch(opState){ // Transitions
		case output:
			break;
	}
	switch(opState){ // State actions
 236:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opState>
 23a:	81 11       	cpse	r24, r1
 23c:	0a c0       	rjmp	.+20     	; 0x252 <SM_output+0x1c>
		case output:
			tmpB = threeLEDs | blinkingLED | soundOutput;
 23e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <threeLEDs>
 242:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <blinkingLED>
 246:	89 2b       	or	r24, r25
 248:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <soundOutput>
 24c:	89 2b       	or	r24, r25
 24e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 252:	08 95       	ret

00000254 <SM_sound>:
	}

}
enum bStates{wait, soundOn, soundOff} bState;
void SM_sound(){
	tmpA = ~PINA & 0x04;
 254:	80 b1       	in	r24, 0x00	; 0
 256:	80 95       	com	r24
 258:	84 70       	andi	r24, 0x04	; 4
 25a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tmpA>
	switch(bState){ // Transitions
 25e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <bState>
 262:	91 30       	cpi	r25, 0x01	; 1
 264:	51 f0       	breq	.+20     	; 0x27a <SM_sound+0x26>
 266:	18 f0       	brcs	.+6      	; 0x26e <SM_sound+0x1a>
 268:	92 30       	cpi	r25, 0x02	; 2
 26a:	81 f0       	breq	.+32     	; 0x28c <SM_sound+0x38>
 26c:	18 c0       	rjmp	.+48     	; 0x29e <SM_sound+0x4a>
		case wait:
			if(tmpA){
 26e:	88 23       	and	r24, r24
 270:	e1 f0       	breq	.+56     	; 0x2aa <SM_sound+0x56>
				bState = soundOn;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <bState>
 278:	1b c0       	rjmp	.+54     	; 0x2b0 <SM_sound+0x5c>
			else{
				bState = wait;
			}
			break;
		case soundOn:
			if(tmpA){
 27a:	88 23       	and	r24, r24
 27c:	21 f0       	breq	.+8      	; 0x286 <SM_sound+0x32>
				bState = soundOff;
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <bState>
 284:	19 c0       	rjmp	.+50     	; 0x2b8 <SM_sound+0x64>
			}
			else{
				bState = wait;
 286:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <bState>
 28a:	0f c0       	rjmp	.+30     	; 0x2aa <SM_sound+0x56>
			}
			break;
		case soundOff:
			if(tmpA){
 28c:	88 23       	and	r24, r24
 28e:	21 f0       	breq	.+8      	; 0x298 <SM_sound+0x44>
				bState = soundOn;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <bState>
 296:	0c c0       	rjmp	.+24     	; 0x2b0 <SM_sound+0x5c>
			}
			else{
				bState = wait;
 298:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <bState>
 29c:	06 c0       	rjmp	.+12     	; 0x2aa <SM_sound+0x56>
			}
	}
	switch(bState){ // State actions
 29e:	91 30       	cpi	r25, 0x01	; 1
 2a0:	39 f0       	breq	.+14     	; 0x2b0 <SM_sound+0x5c>
 2a2:	18 f0       	brcs	.+6      	; 0x2aa <SM_sound+0x56>
 2a4:	92 30       	cpi	r25, 0x02	; 2
 2a6:	51 f4       	brne	.+20     	; 0x2bc <SM_sound+0x68>
 2a8:	07 c0       	rjmp	.+14     	; 0x2b8 <SM_sound+0x64>
		case wait:
			soundOutput = 0x00;
 2aa:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <soundOutput>
			break;
 2ae:	08 95       	ret
		case soundOn:
			soundOutput = 0x10;
 2b0:	80 e1       	ldi	r24, 0x10	; 16
 2b2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <soundOutput>
			break;
 2b6:	08 95       	ret
		case soundOff:
			soundOutput = 0x00;
 2b8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <soundOutput>
 2bc:	08 95       	ret

000002be <SM_Freq_Tick>:
}

enum freqStates{bwait, up, upWait, down, downWait} fstate;
unsigned long freqTime = 2;
void SM_Freq_Tick(){
	unsigned char button0 = ~PINA & 0x01;
 2be:	80 b1       	in	r24, 0x00	; 0
 2c0:	28 2f       	mov	r18, r24
 2c2:	21 70       	andi	r18, 0x01	; 1
	unsigned char button1 = ~PINA & 0x02;
 2c4:	80 b1       	in	r24, 0x00	; 0
 2c6:	80 95       	com	r24
 2c8:	82 70       	andi	r24, 0x02	; 2
	
	switch(fstate){
 2ca:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <fstate>
 2ce:	92 30       	cpi	r25, 0x02	; 2
 2d0:	f1 f0       	breq	.+60     	; 0x30e <SM_Freq_Tick+0x50>
 2d2:	28 f4       	brcc	.+10     	; 0x2de <SM_Freq_Tick+0x20>
 2d4:	99 23       	and	r25, r25
 2d6:	41 f0       	breq	.+16     	; 0x2e8 <SM_Freq_Tick+0x2a>
 2d8:	91 30       	cpi	r25, 0x01	; 1
 2da:	a9 f0       	breq	.+42     	; 0x306 <SM_Freq_Tick+0x48>
 2dc:	26 c0       	rjmp	.+76     	; 0x32a <SM_Freq_Tick+0x6c>
 2de:	93 30       	cpi	r25, 0x03	; 3
 2e0:	d9 f0       	breq	.+54     	; 0x318 <SM_Freq_Tick+0x5a>
 2e2:	94 30       	cpi	r25, 0x04	; 4
 2e4:	e9 f0       	breq	.+58     	; 0x320 <SM_Freq_Tick+0x62>
 2e6:	21 c0       	rjmp	.+66     	; 0x32a <SM_Freq_Tick+0x6c>
		case bwait:
			if(button0 && !button1){
 2e8:	21 11       	cpse	r18, r1
 2ea:	06 c0       	rjmp	.+12     	; 0x2f8 <SM_Freq_Tick+0x3a>
 2ec:	81 11       	cpse	r24, r1
 2ee:	49 c0       	rjmp	.+146    	; 0x382 <SM_Freq_Tick+0xc4>
				fstate = up;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <fstate>
 2f6:	1e c0       	rjmp	.+60     	; 0x334 <SM_Freq_Tick+0x76>
			}
			else if(!button0 && button1){
 2f8:	88 23       	and	r24, r24
 2fa:	09 f4       	brne	.+2      	; 0x2fe <SM_Freq_Tick+0x40>
 2fc:	42 c0       	rjmp	.+132    	; 0x382 <SM_Freq_Tick+0xc4>
				fstate = down;
 2fe:	83 e0       	ldi	r24, 0x03	; 3
 300:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <fstate>
 304:	2b c0       	rjmp	.+86     	; 0x35c <SM_Freq_Tick+0x9e>
			else{
				fstate = bwait;
			}
			break;
		case up:
			fstate = upWait;
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <fstate>
			break;
 30c:	08 95       	ret
		case upWait:
			if(button0){
 30e:	22 23       	and	r18, r18
 310:	c1 f1       	breq	.+112    	; 0x382 <SM_Freq_Tick+0xc4>
				fstate = upWait;
			}
			else
				fstate = bwait;
 312:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <fstate>
 316:	08 95       	ret
			break;

		case down:
			fstate = downWait;
 318:	84 e0       	ldi	r24, 0x04	; 4
 31a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <fstate>
			break;
 31e:	08 95       	ret
		case downWait:
			if(button1){
 320:	81 11       	cpse	r24, r1
 322:	2f c0       	rjmp	.+94     	; 0x382 <SM_Freq_Tick+0xc4>
				fstate = downWait;
			}
			else
				fstate = bwait;
 324:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <fstate>
 328:	08 95       	ret
			break;			
		
	}
	switch(fstate){
 32a:	91 30       	cpi	r25, 0x01	; 1
 32c:	19 f0       	breq	.+6      	; 0x334 <SM_Freq_Tick+0x76>
 32e:	93 30       	cpi	r25, 0x03	; 3
 330:	a9 f0       	breq	.+42     	; 0x35c <SM_Freq_Tick+0x9e>
 332:	08 95       	ret
		case bwait:
			break;
		case up:
			freqTime += 1;
 334:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 338:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 33c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 340:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	a1 1d       	adc	r26, r1
 348:	b1 1d       	adc	r27, r1
 34a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 34e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 352:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 356:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
			break;
 35a:	08 95       	ret
		case upWait:
			break;
		case down:
			freqTime -= 1;
 35c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 360:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 364:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 368:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	a1 09       	sbc	r26, r1
 370:	b1 09       	sbc	r27, r1
 372:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 376:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 37a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 37e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 382:	08 95       	ret

00000384 <main>:
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Set A to input and initialize to 0xFF
 384:	11 b8       	out	0x01, r1	; 1
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // Set B to output and initialize to 0x00
 38a:	84 b9       	out	0x04, r24	; 4
 38c:	15 b8       	out	0x05, r1	; 5
	unsigned long soundTime = 0;
	unsigned long largePeriod = 1000;
	unsigned long smallPeriod = 300;
	const unsigned long TimerPeriod = 1;

	TimerSet(TimerPeriod);
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 396:	f8 de       	rcall	.-528    	; 0x188 <TimerSet>
 398:	97 de       	rcall	.-722    	; 0xc8 <TimerOn>
	
	opState = output;
 39a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <opState>
	threeState = threeInit;
 39e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <threeState>
	singleState = on;
 3a2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <singleState>
	DDRB = 0xFF; PORTB = 0x00; // Set B to output and initialize to 0x00
	//DDRC = 0xFF; PORTC = 0x00; // LCD data lines
	//DDRD = 0xFF; PORTD = 0x00; // LCD control lines
	unsigned long lelapsedTime = 0;
	unsigned long selapsedTime = 0;
	unsigned long soundTime = 0;
 3a6:	41 2c       	mov	r4, r1
 3a8:	51 2c       	mov	r5, r1
 3aa:	32 01       	movw	r6, r4
{
	DDRA = 0x00; PORTA = 0xFF; // Set A to input and initialize to 0xFF
	DDRB = 0xFF; PORTB = 0x00; // Set B to output and initialize to 0x00
	//DDRC = 0xFF; PORTC = 0x00; // LCD data lines
	//DDRD = 0xFF; PORTD = 0x00; // LCD control lines
	unsigned long lelapsedTime = 0;
 3ac:	81 2c       	mov	r8, r1
 3ae:	91 2c       	mov	r9, r1
 3b0:	54 01       	movw	r10, r8
	unsigned long selapsedTime = 0;
 3b2:	c1 2c       	mov	r12, r1
 3b4:	d1 2c       	mov	r13, r1
 3b6:	76 01       	movw	r14, r12
	opState = output;
	threeState = threeInit;
	singleState = on;
	while(1){
		if(lelapsedTime >= largePeriod){
			SM_Single_Tick();
 3b8:	0f c0       	rjmp	.+30     	; 0x3d8 <main+0x54>
 3ba:	23 df       	rcall	.-442    	; 0x202 <SM_Single_Tick>
			lelapsedTime = 0;
 3bc:	81 2c       	mov	r8, r1
 3be:	91 2c       	mov	r9, r1
 3c0:	54 01       	movw	r10, r8
		}
		if(selapsedTime >= smallPeriod){
 3c2:	8c e2       	ldi	r24, 0x2C	; 44
 3c4:	c8 16       	cp	r12, r24
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	d8 06       	cpc	r13, r24
 3ca:	e1 04       	cpc	r14, r1
 3cc:	f1 04       	cpc	r15, r1
			SM_Three_Tick();
 3ce:	20 f0       	brcs	.+8      	; 0x3d8 <main+0x54>
 3d0:	ec de       	rcall	.-552    	; 0x1aa <SM_Three_Tick>
			selapsedTime = 0;
 3d2:	c1 2c       	mov	r12, r1
 3d4:	d1 2c       	mov	r13, r1
 3d6:	76 01       	movw	r14, r12
		}
		if(soundTime >= freqTime){
 3d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3e0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 3e4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 3e8:	48 16       	cp	r4, r24
 3ea:	59 06       	cpc	r5, r25
 3ec:	6a 06       	cpc	r6, r26
			SM_sound();
			soundTime = 0;
 3ee:	7b 06       	cpc	r7, r27
 3f0:	20 f0       	brcs	.+8      	; 0x3fa <main+0x76>
 3f2:	30 df       	rcall	.-416    	; 0x254 <SM_sound>
		}
		SM_Freq_Tick();
 3f4:	41 2c       	mov	r4, r1
 3f6:	51 2c       	mov	r5, r1
		SM_output();
 3f8:	32 01       	movw	r6, r4
 3fa:	61 df       	rcall	.-318    	; 0x2be <SM_Freq_Tick>
		PORTB = tmpB;
 3fc:	1c df       	rcall	.-456    	; 0x236 <SM_output>
 3fe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
		while(!TimerFlag){}
 402:	85 b9       	out	0x05, r24	; 5
 404:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <TimerFlag>
 408:	88 23       	and	r24, r24
		TimerFlag = 0;
 40a:	e1 f3       	breq	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 40c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <TimerFlag>
		lelapsedTime += TimerPeriod;
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	88 1a       	sub	r8, r24
 414:	98 0a       	sbc	r9, r24
 416:	a8 0a       	sbc	r10, r24
		selapsedTime += TimerPeriod;
 418:	b8 0a       	sbc	r11, r24
 41a:	8f ef       	ldi	r24, 0xFF	; 255
 41c:	c8 1a       	sub	r12, r24
 41e:	d8 0a       	sbc	r13, r24
 420:	e8 0a       	sbc	r14, r24
		soundTime += TimerPeriod;
 422:	f8 0a       	sbc	r15, r24
 424:	8f ef       	ldi	r24, 0xFF	; 255
 426:	48 1a       	sub	r4, r24
 428:	58 0a       	sbc	r5, r24
 42a:	68 0a       	sbc	r6, r24
	
	opState = output;
	threeState = threeInit;
	singleState = on;
	while(1){
		if(lelapsedTime >= largePeriod){
 42c:	78 0a       	sbc	r7, r24
 42e:	88 ee       	ldi	r24, 0xE8	; 232
 430:	88 16       	cp	r8, r24
 432:	83 e0       	ldi	r24, 0x03	; 3
 434:	98 06       	cpc	r9, r24
 436:	a1 04       	cpc	r10, r1
 438:	b1 04       	cpc	r11, r1
 43a:	08 f4       	brcc	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43c:	c2 cf       	rjmp	.-124    	; 0x3c2 <main+0x3e>
 43e:	bd cf       	rjmp	.-134    	; 0x3ba <main+0x36>

00000440 <_exit>:
 440:	f8 94       	cli

00000442 <__stop_program>:
 442:	ff cf       	rjmp	.-2      	; 0x442 <__stop_program>
