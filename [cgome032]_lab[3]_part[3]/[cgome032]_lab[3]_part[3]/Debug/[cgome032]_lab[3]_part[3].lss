
[cgome032]_lab[3]_part[3].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000204  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d2  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  00000b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032c  00000000  00000000  0000133b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001668  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000455  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001af1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	65 d0       	rcall	.+202    	; 0x174 <main>
  aa:	70 c0       	rjmp	.+224    	; 0x18c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <lock_Tick>:

unsigned char tmpB;


void lock_Tick(){
	buttonX = PINA & 0x01;
  ae:	80 b1       	in	r24, 0x00	; 0
  b0:	81 70       	andi	r24, 0x01	; 1
  b2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <buttonX>
	buttonY = PINA & 0x02;
  b6:	90 b1       	in	r25, 0x00	; 0
  b8:	92 70       	andi	r25, 0x02	; 2
  ba:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <buttonY>
	buttonP = PINA & 0x04;
  be:	20 b1       	in	r18, 0x00	; 0
  c0:	24 70       	andi	r18, 0x04	; 4
  c2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
	buttonLock = PINA & 0x80;
  c6:	40 b1       	in	r20, 0x00	; 0
  c8:	40 78       	andi	r20, 0x80	; 128
  ca:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <buttonLock>
		
	switch(state){ // Transitions
  ce:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <state>
  d2:	31 30       	cpi	r19, 0x01	; 1
  d4:	91 f0       	breq	.+36     	; 0xfa <lock_Tick+0x4c>
  d6:	28 f0       	brcs	.+10     	; 0xe2 <lock_Tick+0x34>
  d8:	32 30       	cpi	r19, 0x02	; 2
  da:	09 f1       	breq	.+66     	; 0x11e <lock_Tick+0x70>
  dc:	33 30       	cpi	r19, 0x03	; 3
  de:	99 f1       	breq	.+102    	; 0x146 <lock_Tick+0x98>
  e0:	3d c0       	rjmp	.+122    	; 0x15c <lock_Tick+0xae>
		case locked:
			if(buttonLock){
				state = locked;
			}
			if(!buttonX && !buttonY && buttonP && !buttonLock){
  e2:	81 11       	cpse	r24, r1
  e4:	40 c0       	rjmp	.+128    	; 0x166 <lock_Tick+0xb8>
  e6:	91 11       	cpse	r25, r1
  e8:	3e c0       	rjmp	.+124    	; 0x166 <lock_Tick+0xb8>
  ea:	22 23       	and	r18, r18
  ec:	e1 f1       	breq	.+120    	; 0x166 <lock_Tick+0xb8>
  ee:	41 11       	cpse	r20, r1
  f0:	3a c0       	rjmp	.+116    	; 0x166 <lock_Tick+0xb8>
				state = wait;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
  f8:	08 95       	ret
			else{
				state = locked;
			}
			break;
		case wait:
			if(!buttonX && !buttonY && buttonP && !buttonLock){
  fa:	81 11       	cpse	r24, r1
  fc:	0d c0       	rjmp	.+26     	; 0x118 <lock_Tick+0x6a>
  fe:	91 11       	cpse	r25, r1
 100:	0b c0       	rjmp	.+22     	; 0x118 <lock_Tick+0x6a>
 102:	22 23       	and	r18, r18
 104:	19 f0       	breq	.+6      	; 0x10c <lock_Tick+0x5e>
 106:	44 23       	and	r20, r20
 108:	a1 f1       	breq	.+104    	; 0x172 <lock_Tick+0xc4>
 10a:	06 c0       	rjmp	.+12     	; 0x118 <lock_Tick+0x6a>
				state = wait;
			}
			else if(!buttonX && !buttonY && !buttonP && !buttonLock){
 10c:	41 11       	cpse	r20, r1
 10e:	04 c0       	rjmp	.+8      	; 0x118 <lock_Tick+0x6a>
				state = release;
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 116:	08 95       	ret
			}
			else{
				state = locked;
 118:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
 11c:	24 c0       	rjmp	.+72     	; 0x166 <lock_Tick+0xb8>
			}
			break;
		case release:
			if(!buttonX && !buttonY && !buttonP && !buttonLock){
 11e:	81 11       	cpse	r24, r1
 120:	0f c0       	rjmp	.+30     	; 0x140 <lock_Tick+0x92>
 122:	91 11       	cpse	r25, r1
 124:	05 c0       	rjmp	.+10     	; 0x130 <lock_Tick+0x82>
 126:	21 11       	cpse	r18, r1
 128:	0b c0       	rjmp	.+22     	; 0x140 <lock_Tick+0x92>
 12a:	44 23       	and	r20, r20
 12c:	11 f1       	breq	.+68     	; 0x172 <lock_Tick+0xc4>
 12e:	08 c0       	rjmp	.+16     	; 0x140 <lock_Tick+0x92>
				state = release;
			}
			else if(!buttonX && buttonY && !buttonP && !buttonLock){
 130:	21 11       	cpse	r18, r1
 132:	06 c0       	rjmp	.+12     	; 0x140 <lock_Tick+0x92>
 134:	41 11       	cpse	r20, r1
 136:	04 c0       	rjmp	.+8      	; 0x140 <lock_Tick+0x92>
				state = unlock;
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 13e:	16 c0       	rjmp	.+44     	; 0x16c <lock_Tick+0xbe>
			}
			else{
				state = locked;
 140:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
 144:	10 c0       	rjmp	.+32     	; 0x166 <lock_Tick+0xb8>
			}
			break;
		case unlock:
			if(!buttonX && !buttonY && !buttonP && buttonLock){
 146:	81 11       	cpse	r24, r1
 148:	11 c0       	rjmp	.+34     	; 0x16c <lock_Tick+0xbe>
 14a:	91 11       	cpse	r25, r1
 14c:	0f c0       	rjmp	.+30     	; 0x16c <lock_Tick+0xbe>
 14e:	21 11       	cpse	r18, r1
 150:	0d c0       	rjmp	.+26     	; 0x16c <lock_Tick+0xbe>
 152:	44 23       	and	r20, r20
 154:	59 f0       	breq	.+22     	; 0x16c <lock_Tick+0xbe>
				state = locked;
 156:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
 15a:	05 c0       	rjmp	.+10     	; 0x166 <lock_Tick+0xb8>
			else{
				state = unlock;
			}
			break;
	}
	switch(state){ // State actions
 15c:	33 23       	and	r19, r19
 15e:	19 f0       	breq	.+6      	; 0x166 <lock_Tick+0xb8>
 160:	33 30       	cpi	r19, 0x03	; 3
 162:	39 f4       	brne	.+14     	; 0x172 <lock_Tick+0xc4>
 164:	03 c0       	rjmp	.+6      	; 0x16c <lock_Tick+0xbe>
		case locked:
			tmpB = 0x00;
 166:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <tmpB>
			break;
 16a:	08 95       	ret
		case wait:
			break;
		case release:
			break;
		case unlock:
			tmpB = 0x01;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tmpB>
 172:	08 95       	ret

00000174 <main>:
	}			
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
 174:	11 b8       	out	0x01, r1	; 1
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // Configure port B's 8 pins as outputs
 17a:	84 b9       	out	0x04, r24	; 4
 17c:	15 b8       	out	0x05, r1	; 5
										// initialize to 0s
																				
	state = locked;
 17e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>

	while (1) 
    {		
		lock_Tick();
		PORTB = tmpB;
 182:	95 df       	rcall	.-214    	; 0xae <lock_Tick>
 184:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tmpB>
 188:	85 b9       	out	0x05, r24	; 5
 18a:	fb cf       	rjmp	.-10     	; 0x182 <main+0xe>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
